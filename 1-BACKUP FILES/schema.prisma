generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum YesNo {
  YES
  NO
}

model Property {
  property_id      Int     @id @default(autoincrement())
  property_name    String  @db.VarChar(255)
  address          String
  city             String?
  state            String?
  zipcode          Int?
  county           String?
  owner            String
  market_value     Float?
  year             Int?
  type             String
  status           String
  income_producing YesNo   @default(NO)
  created_at       DateTime @default(now())

  // Relations
  rentRolls       RentRoll[]
  transactions    Transaction[]
  purchaseDetails PurchaseDetails[]
  loanDetails     LoanDetails[]     @relation("PropertyLoans")

  @@map("properties")
}

model RentRoll {
  rent_id        Int      @id @default(autoincrement())
  property_id    Int
  month          String
  year           Int
  rent_amount    Decimal  @db.Decimal(12, 2)
  date_deposited DateTime @db.Date
  notes          String?
  check_number   Int?

  property Property @relation(fields: [property_id], references: [property_id])

  @@unique([property_id, month, year], name: "property_id_month_year")
  @@map("rent_roll")
}

model Transaction {
  transaction_id     Int      @id @default(autoincrement())
  property_id        Int
  transaction_type   String?  @db.VarChar(100)
  notes              String?  @db.VarChar(255)
  transaction_amount Decimal  @db.Decimal(12, 2)
  transaction_date   DateTime @db.Date

  property Property @relation(fields: [property_id], references: [property_id])

  @@map("transactions")
}

model PurchaseDetails {
  purchase_id      Int      @id @default(autoincrement())
  property_id      Int
  purchase_price   Decimal  @db.Decimal(12, 2)
  financing_type   String
  acquisition_type String
  buyer            String
  seller           String
  closing_date     DateTime
  closing_costs    Decimal  @db.Decimal(12, 2)
  earnest_money    Decimal? @db.Decimal(12, 2)
  notes            String?

  property Property      @relation(fields: [property_id], references: [property_id])
  loans    LoanDetails[] @relation("PurchaseLoans")

  @@map("purchase_details")
}

model LoanDetails {
  loan_id            String      @id
  property_id        Int
  purchase_id        Int
  loan_amount        Float
  lender             String
  interest_rate      Float
  loan_term          Int
  loan_mortgage      Float
  loan_start         DateTime?
  loan_end           DateTime?
  loan_type          String
  balloon_payment    Boolean
  prepayment_penalty Boolean
  refinanced         Boolean
  loan_status        String
  notes              String?

  property Property        @relation("PropertyLoans", fields: [property_id], references: [property_id])
  purchase PurchaseDetails @relation("PurchaseLoans", fields: [purchase_id], references: [purchase_id])

  @@unique([property_id, purchase_id])
  @@map("loan_details")
}
